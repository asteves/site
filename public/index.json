[{"authors":["admin"],"categories":null,"content":"I am a PhD Student in the Travers Deparment of Political Science at UC Berkeley. My primary research interests are military organizations, the determinants of political violence, non-state actors, and causal inference. I am also interested in creating tools to make software easier to use for non-technical political scientists.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a PhD Student in the Travers Deparment of Political Science at UC Berkeley. My primary research interests are military organizations, the determinants of political violence, non-state actors, and causal inference. I am also interested in creating tools to make software easier to use for non-technical political scientists.","tags":null,"title":"Alex Stephenson","type":"authors"},{"authors":null,"categories":null,"content":" Information Links Data ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"65e4eee61b59278c894c14e489cdf2d6","permalink":"/courses/calculus/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/calculus/","section":"courses","summary":"Notes and problem solutions for Stewart's Calculus 8th Edition","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" Information Links Data ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"34026141c8bbf1646db5649954143203","permalink":"/courses/econometrics/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/econometrics/","section":"courses","summary":"Notes and problem solutions for Woolridge's Introductory Econometrics","tags":null,"title":"Econometrics","type":"docs"},{"authors":null,"categories":null,"content":" Information Links Data ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"8400dc3ed1be934675d8330f6bee0132","permalink":"/courses/psfive/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/psfive/","section":"courses","summary":"Notes and information for UC Berkeley's Introduction to International Relations-Fall 2019","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" We are interested in studying models that take the following form\n\\[y = \\beta_0 + \\beta_1x + u\\]\nwhere \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope parameter and u is the error term. In the next set of notes, we will extend this model to situations where we have more than one covariate.\nWe can think of \\(\\beta_0 + \\beta_1x\\) as the systematic part of y whereas u is the unsystematic part of y. That is, u represents y not explained by x.\nError Term Assumptions In order to make progress, we make the following assumptions about the error term.\n \\(E[u] = 0\\) as long as an intercept term is included in the equation. Note that this essentially defines the intercept.\n \\(E[u|x] = E[u] = 0\\). This is the Zero Conditional Mean Assumption for the error term.\n The average value of the unobservables is the same across all slices of the population determined by the value of x and is equal to the average of u over the entire population By EA.1 that means the average is 0   Deriving OLS Estimates To estimate the Population Regression Function (PRF), we need a sample.\nLet \\((x_i, y_i): i = 1,\u0026hellip;,n\\) be a random sample of size n from the population. We can estimate the PRF by a model:\n\\[y = \\beta_0 + \\beta_1x_i + u_i\\] (E.2)\nError Assumption 2 implies that in the popuation x and u are uncorrelated, and the zero conditional mean assumption for the error implies that \\(E[u] = 0\\). This implies that the covariance between x and u is 0 or formally: \\[Cov(x,u) = E(xu) = 0\\]\nWe can rewrite previous equations as follows\n\\[E[u] = E[ y - \\beta_0 + \\beta_1x]\\] (E.3)\n\\[Cov(x,u) = E[x(y - \\beta_0 + \\beta_1x)]\\] (E.4)\nOur goal is to choose sample \\(\\hat{\\beta_0}\\),\\(\\hat{\\beta_1}\\) to solve the sample equations:\n\\[\\frac{1}{n}\\sum_{i=1}^n y - \\hat{\\beta_0} + \\hat{\\beta_1}x = 0\\] (E.5)\n\\[\\frac{1}{n}\\sum_{i=1}^n x_i(y - \\hat{\\beta_0} + \\hat{\\beta_1}x) = 0\\] (E.6)\nRewrite E.4\n\\[\\bar{y} = \\hat{\\beta_0} + \\hat{\\beta_1}\\bar{x}\\] which implies\n\\[\\beta_0 = \\bar{y} - \\hat{\\beta_1}\\bar{x}\\]\nEstimating The Slope Parameter Drop the \\(\\frac{1}{n}\\) in E.5 because it does not affect the solution. Plug in \\(\\bar{y} - \\hat{\\beta_1}\\bar{x}\\) for \\(\\beta_0\\) which yields the equation\n\\[\\sum_{i=1}^n x_i(\\bar{y} - \\hat{\\beta_1}\\bar{x}) - \\hat{\\beta_1}x) = 0\\]\nRearrange terms to get the y\u0026rsquo;s and the x\u0026rsquo;s on opposite sides of the equation. \\[\\sum_{i=1}^n x_i(y_i - \\bar{y})\\] \\[\\hat{\\beta_1}\\sum x_i(x_i - \\bar{x})\\]\nSetting these equal to each other and using properties of the sum operator, we can rewrite the the top sum to be \\(Cov(x,y)\\) and the bottom sum to \\(V(x)\\). As long as \\(V(x) \u0026gt; 0\\),\n\\[\\hat{\\beta_1} = \\frac{\\hat{Cov(x,y)}}{\\hat{V(x)}}\\]\nIn words, the slope parameter estimate is the sample covariance of x and y divided by the sample variance of x. We refer to this as the OLS procedure and the OLS regression line as\n\\[\\hat{y} = \\hat{\\beta_0} + \\hat{\\beta_1}x\\]\nAlgebraic Properties of OLS on Any Sample of Data The following hold by construction for any sample of data estimated by OLS\n The sum and therefore sample average of the residuals is 0. This is because the OLS estimates are chosen to make the residuals sum to 0. Sample covariance between regressors and OLS residuals is 0 The point \\((\\bar{x}, \\bar{y})\\) is always on the OLS regression line  Variation in Y We can view OLS as decomposing each \\(y_i\\) into two parts, a fitted value and a residual. There are three parts of this decomposition: the total sum of squares (SST), the explained sum of squares (SSE), and the residual sum of squares (SSR).\n\\[SST = \\sum_{i=1}^n (y_i -\\bar{y})^2\\]\n\\[SSE = \\sum_{i=1}^n (\\hat{y_i} -\\bar{y})^2\\]\n\\[SSR = \\sum_{i=1}^n \\hat{u}^2\\]\nSST is a measure of total sample variation in the \\(y_i\\)\u0026rsquo;s. Dividing SST by n-1 gets us the sample variance of y.\nThe Total Variation in y is SST = SSE + SSR.\nTo derive\n\\[\\sum_{i=1}^n (y_i -\\bar{y})^2\\]\n\\[\\sum_{i=1}^n [(y_i - \\hat{y_i}) + (\\hat{y_i}-\\bar{y})]^2\\]\n\\[\\sum_{i=1}^n [\\hat{u_i} + (\\hat{y_i}-\\bar{y})]^2\\]\nExpand out the sum and replace with definitions to get\n\\[SSR + 2Cov(\\hat{u}, \\hat{y}) + SSE\\]\nSince the covariance between u and y is 0, that term drops out.\nGoodness of Fit The ratio of the explained sample variation in y by x is known as \\(R^2\\) and defined:\n\\[R^2 = 1 - \\frac{SSR}{SST}\\]\nExpected Values and Unbiasedness of OLS Estimators OLS is an unbiased estimator of the population model provided the following assumptions hold. These assumptions are also known as Gauss-Markov assumptions.\nA1. Linear in paramters In the population model, y is related to x and u\n\\[y = \\beta_0 + \\beta_1x + u \\]\nA2. Random Sample We have a random sample of size n from the population model\nA3. Sample variation in x The sample outcomes \\(x_i: i = 1,2,\u0026hellip;, n\\) are not all the same value. If they are, there is no variance of X and so \\(\\beta_1\\) cannot be estimated.\nA4. Zero Conditional Mean of the Error For a random sample, this assumption implies\n\\[E(u_i|x_i) = 0: \\forall i \\in [0,1,\u0026hellip;n]\\]\nA4 is violated whenever we think that u and x are correlated. In the simple bivariate case, an example might be using the variable education to predict salary. education is correlated with many variables, including income and family history. These may affect salary and therefore will give us biased results.\nNote: We can write the slope estimator \\(\\beta_1\\) in a slightly different way\n\\[\\hat{\\beta_1} = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})*(\\beta_0 - \\beta_1x + u_i)}{SST_x}\\]\n\\[\\hat{\\beta_1} = \\beta_0 \\sum_{i=1}^n\\ + \\beta_1\\sum_{i=1}^n x_i(x_i -\\bar{x}) + \\sum_{i=1}^n u_i(x_i - \\bar{x})\\]\nThe first term sums to 0 and drops out. Thus:\n\\[\\hat{\\beta_1} = \\beta_1 + \\frac{\\sum_{i=1}^n u_i(x_i - \\bar{x})}{SST_x}\\]\nWe now have all the information we need to prove that OLS is unbiased. Unbiasedness is a feature of the sampling distributions of \\(\\hat{\\beta_0}\\) and \\(\\hat{\\beta_1}\\). Unbiasedness says nothing about the estimates for any given sample we may draw.\nTheorem 1: Using A1-A4 OLS produces unbiased estimates \\(E(\\hat{\\beta_0}) = \\beta_0\\) and \\(E(\\hat{\\beta_1}) = \\beta_1\\)for any values of \\(\\beta_0\\) and \\(\\beta_1\\).\nProof:\nIn this proof the expected values are conditional on sample values of the independent variable x. Because \\(SST_x\\) and \\((x_i - \\bar(x))\\) are functions on of \\(x_i\\) they are non-random once we condition on x.\n\\[E[\\hat{\\beta_1}] = E[\\beta_1 + \\frac{\\sum_{i=1}^n u_i(x_i - \\bar{x})}{SST_x}]\\]\n\\[E[\\hat{\\beta_1}] = \\beta_1 + \\frac{\\sum_{i=1}^n E[u_i(x_i - \\bar{x})]}{SST_x}\\]\n\\[E[\\hat{\\beta_1}] = \\beta_1 + \\frac{\\sum_{i=1}^n 0 (x_i - \\bar{x})}{SST_x}\\]\n\\[E[\\hat{\\beta_1}] = \\beta_1\\]\nWe can also prove the same for \\(\\beta_0\\).\n\\[E[\\hat{\\beta_0}] = \\beta_0 + E[(\\beta_1 - \\hat{\\beta_1}\\bar{x} + E[\\bar{u}]\\]\n\\[E[\\hat{\\beta_0}] = \\beta_0 + E[(\\beta_1 - \\hat{\\beta_1}\\bar{x} + 0\\]\n\\[E[\\hat{\\beta_0}] = \\beta_0\\]\nIn the last equation, because \\(\\hat{\\beta_1} = \\beta_1\\) the second term drops out.\nVariances of OLS Estimators An additional assumption we can make about the variance of the OLS estimators is that the error u has the same variances conditional on any value of the explanatory variable.\n\\[V(u|x) = \\sigma^2\\]\nBy adding this assumption, which to be clear will break down horribly if it is violated, we can prove the following theorem.\nTheorem 2: Using assumptions 1-4 and homoskedastic error assumption \\[V(\\hat{\\beta_1}) = \\frac{\\sigma^2}{SST_x}\\] and \\[V(\\hat{\\beta_0}) = \\frac{\\sigma^2\\frac{1}{n}\\sum_{i=1}^n x_i^2}{\\sum_{i=1}^n(x_i - \\bar{x})^2}\\]\nwhere these are conditioned on the sample values.\nProof for \\(V(\\hat{\\beta_1})\\)\n\\[V(\\hat{\\beta_1}) = \\frac{1^2}{SST_x^2}V(\\sum_{i=1}^n u_i(x_i - \\bar{x}))\\]\nSubstitute \\(d_i = (x_i - \\bar{x})\\)\n\\[V(\\hat{\\beta_1}) = \\frac{1^2}{SST_x^2}\\sum_{i=1}^n u_i d_i^2\\]\nSince \\(V(u_i) = \\sigma^2 : \\forall i\\) we can substitute that constant into the equation.\n\\[V(\\hat{\\beta_1}) = \\frac{1}{SST_x^2}\\sigma^2 \\sum_{i=1}^n d_i^2\\]\nObserve that the second RHS term is just \\(SST_x\\) after pulling out the constant, we can rewrite as\n\\[V(\\hat{\\beta_1}) = \\frac{\\sigma^2 SST_x}{SST_x^2}\\]\nwhich reduces to our stated result.\nNow that we know the way to estimate the variance, we can ask the following question. How does \\(V(\\hat{\\beta_1})\\) depend on error variance?\n The larger the error variance, the larger \\(V(\\hat{\\beta_1})\\). The larger the \\(V(x)\\), the smaller \\(V(\\hat{\\beta_1})\\) As sample size increases, the total variation in x increases which leads to a decrease in \\(V(\\hat{\\beta_1})\\)  Estimating the Erroro Variance Errors are never observed. Instead, we observe residuals that we can compute from our sample data. We can write the errors as a function of the residuals.\n\\[\\hat{u_i} = u_i - (\\hat{\\beta_0} - \\beta_0) - (\\hat{\\beta_1} - \\beta_1)x\\]\nOne problem that we run into is that using the residuals as an estimator is biased without correction because it does not take into account two restrictions for OLS residuals. OLS residuals have to sum to 0 and have a 0 covariance between x and u. Formally,\n\\[\\sum_{i=1}^n \\hat{u_i} = 0\\]\nand\n\\[\\sum_{i=1}^n \\hat{u_i}x_i = 0\\].\nThus we need to correct by n-2 degrees of freedom for an unbiased estimator. When we do so, we get the following.\n\\[\\hat{\\sigma}^2 = \\hat{s}^2 = \\frac{1}{n-2}\\sum_{i=1}^n\\hat{u_i}^2\\]\n\\[\\hat{\\sigma}^2 = \\frac{SSR}{n-2}\\]\n","date":1559689200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559689200,"objectID":"00d8222c91d1d204ccc61d4d75887467","permalink":"/courses/econometrics/chap2/","publishdate":"2019-06-05T00:00:00+01:00","relpermalink":"/courses/econometrics/chap2/","section":"courses","summary":"We are interested in studying models that take the following form\n\\[y = \\beta_0 + \\beta_1x + u\\]\nwhere \\(\\beta_0\\) is the intercept, \\(\\beta_1\\) is the slope parameter and u is the error term. In the next set of notes, we will extend this model to situations where we have more than one covariate.\nWe can think of \\(\\beta_0 + \\beta_1x\\) as the systematic part of y whereas u is the unsystematic part of y.","tags":null,"title":"Simple Linear Regression","type":"docs"},{"authors":null,"categories":null,"content":" Notes Forthcoming\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5c68a5ee512e1942b180439798a3c32e","permalink":"/courses/psfive/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/psfive/example1/","section":"courses","summary":"Notes Forthcoming","tags":null,"title":"Notes for Week 1","type":"docs"},{"authors":null,"categories":null,"content":"We are now going to extend our previous discussion of Simple Linear Regression into the multiple variate case. Here we consider models that include more than one independent variable.\n","date":1559689200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559689200,"objectID":"c612a8163f1855745116fc2064788976","permalink":"/courses/econometrics/chap3/","publishdate":"2019-06-05T00:00:00+01:00","relpermalink":"/courses/econometrics/chap3/","section":"courses","summary":"We are now going to extend our previous discussion of Simple Linear Regression into the multiple variate case. Here we consider models that include more than one independent variable.","tags":null,"title":"Multiple Linear Regression","type":"docs"},{"authors":[],"categories":["R"],"content":" Introduction There are lots of benefits to learning a computer language, even if only learning enough to make yourself dangerous to your own computer. In this post, I\u0026rsquo;ll provide a purposely dumb way to shuffle playing cards and deal hands to different players. In doing so, I will demonstrate a variety of basic operations in the R language.\n# This is a comment. We write comments for future programmers # to be able to read and understand our code. # The most common future programmer to read your code is you # in the future. # Be nice to future you. # Comments in R start with a #. # R will ignore everything after a # on the same line # These next lines set a random number seed # and then sample 10 numbers from 1 to 100 with replacement. #As a result, we might get the same number more than once. set.seed(106108) sample(x = 1:100, size = 10,replace = TRUE, prob = NULL)  ## [1] 83 18 20 2 69 93 20 93 68 33  sample() is a function, or a tool to get stuff done. We can tell something is a function because it has () immediately following it. Note that functions are case sensitive. R does not know what Sample() means. sample comes with the base R distribution, which means you don\u0026rsquo;t have to write it yourself. sample takes four arguments. When googling you may also see arguments referred to as parameters. They are the information the function needs to work.\nThe four arguments are x, which is a vector of elements. In this case x is every number from 1 to 100. The second argument is size, which is the number of elements we want. In our case, that is 10 numbers. The third argument is replace, which determines whether we want to sample with or without replacement. The final argument is prob, which we ignore by setting it to NULL.\nDealing Cards Sampling with replacement comes up a lot in applications with simple random sampling, but for dealing cards we want to sample without replacement. When we deal a playing card, we do not deal that playing card again to another player.\nLet\u0026rsquo;s use R to assign playing cards at random for practice. First, we need to create a vector of playing cards. This will be a string vector, which means that each element will be a piece of text instead of just a number. To R, \u0026ldquo;10\u0026rdquo; is different than 10.\n# First, create a vector of cards and assign it the variable cards cardTypes \u0026lt;- c(2:10, \u0026quot;J\u0026quot;,\u0026quot;Q\u0026quot;,\u0026quot;K\u0026quot;, \u0026quot;A\u0026quot;) # R now knows about the existence of cardTypes. # We will print out the vector to confirm print(cardTypes)  ## [1] \u0026quot;2\u0026quot; \u0026quot;3\u0026quot; \u0026quot;4\u0026quot; \u0026quot;5\u0026quot; \u0026quot;6\u0026quot; \u0026quot;7\u0026quot; \u0026quot;8\u0026quot; \u0026quot;9\u0026quot; \u0026quot;10\u0026quot; \u0026quot;J\u0026quot; \u0026quot;Q\u0026quot; \u0026quot;K\u0026quot; \u0026quot;A\u0026quot;  Next, we need to attach the suit to each card. In R, one way to combine text is to use paste(). Note that paste() has parentheses, so it is a function. To look up what arguments we need we type ?paste into the console.\n# Attach suits to each card hearts = paste(cardTypes, \u0026quot;H\u0026quot;, sep = \u0026quot;\u0026quot;) spades = paste(cardTypes, \u0026quot;S\u0026quot;, sep = \u0026quot;\u0026quot;) clubs = paste(cardTypes, \u0026quot;C\u0026quot;, sep = \u0026quot;\u0026quot;) diamonds = paste(cardTypes, \u0026quot;D\u0026quot;, sep = \u0026quot;\u0026quot;) # combine our playing cards into one vector playingCards = c(hearts, spades, clubs, diamonds) print(playingCards)  ## [1] \u0026quot;2H\u0026quot; \u0026quot;3H\u0026quot; \u0026quot;4H\u0026quot; \u0026quot;5H\u0026quot; \u0026quot;6H\u0026quot; \u0026quot;7H\u0026quot; \u0026quot;8H\u0026quot; \u0026quot;9H\u0026quot; \u0026quot;10H\u0026quot; \u0026quot;JH\u0026quot; \u0026quot;QH\u0026quot; ## [12] \u0026quot;KH\u0026quot; \u0026quot;AH\u0026quot; \u0026quot;2S\u0026quot; \u0026quot;3S\u0026quot; \u0026quot;4S\u0026quot; \u0026quot;5S\u0026quot; \u0026quot;6S\u0026quot; \u0026quot;7S\u0026quot; \u0026quot;8S\u0026quot; \u0026quot;9S\u0026quot; \u0026quot;10S\u0026quot; ## [23] \u0026quot;JS\u0026quot; \u0026quot;QS\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;AS\u0026quot; \u0026quot;2C\u0026quot; \u0026quot;3C\u0026quot; \u0026quot;4C\u0026quot; \u0026quot;5C\u0026quot; \u0026quot;6C\u0026quot; \u0026quot;7C\u0026quot; \u0026quot;8C\u0026quot; ## [34] \u0026quot;9C\u0026quot; \u0026quot;10C\u0026quot; \u0026quot;JC\u0026quot; \u0026quot;QC\u0026quot; \u0026quot;KC\u0026quot; \u0026quot;AC\u0026quot; \u0026quot;2D\u0026quot; \u0026quot;3D\u0026quot; \u0026quot;4D\u0026quot; \u0026quot;5D\u0026quot; \u0026quot;6D\u0026quot; ## [45] \u0026quot;7D\u0026quot; \u0026quot;8D\u0026quot; \u0026quot;9D\u0026quot; \u0026quot;10D\u0026quot; \u0026quot;JD\u0026quot; \u0026quot;QD\u0026quot; \u0026quot;KD\u0026quot; \u0026quot;AD\u0026quot;  # Confirm that we have 35 elements print(length(playingCards))  ## [1] 52  Now that we have our playing cards loaded into R, we can use sample like before to assign them along with a new function called split(). split() requires two arguments, a vector and the groups. We can always see what arguments split() takes with ?split. Note that the help page has more than two arguments, but we only need to provide two because the others have sensible defaults.\n# One of the cool things about functions in R is # that we can use them inside other functions. #Our tools work on other tools. #The groups argument is called f. You can see on the help page why. # Here we are hardcoding that we have seven players. If you were to # rewrite this code in the future, this is one place you might want to # revise and write your own function hands = split(x = sample(playingCards, 35, replace = F), f = c(\u0026quot;1\u0026quot;,\u0026quot;2\u0026quot;,\u0026quot;3\u0026quot;,\u0026quot;4\u0026quot;,\u0026quot;5\u0026quot;,\u0026quot;6\u0026quot;,\u0026quot;7\u0026quot;))  Our new object groups looks different than our other objects. That is because it is a \u0026ldquo;list\u0026rdquo; instead of a vector. A list is a collection of vectors that can have different types. We will learn about lists more as we move through the semester.\nHere are the hands we dealt\nprint(hands)  ## $`1` ## [1] \u0026quot;QD\u0026quot; \u0026quot;4C\u0026quot; \u0026quot;3H\u0026quot; \u0026quot;6C\u0026quot; \u0026quot;QS\u0026quot; ## ## $`2` ## [1] \u0026quot;3D\u0026quot; \u0026quot;QH\u0026quot; \u0026quot;4H\u0026quot; \u0026quot;2S\u0026quot; \u0026quot;8H\u0026quot; ## ## $`3` ## [1] \u0026quot;7C\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;KH\u0026quot; \u0026quot;2H\u0026quot; \u0026quot;4S\u0026quot; ## ## $`4` ## [1] \u0026quot;9D\u0026quot; \u0026quot;KC\u0026quot; \u0026quot;9S\u0026quot; \u0026quot;9H\u0026quot; \u0026quot;4D\u0026quot; ## ## $`5` ## [1] \u0026quot;7H\u0026quot; \u0026quot;JD\u0026quot; \u0026quot;8S\u0026quot; \u0026quot;9C\u0026quot; \u0026quot;3S\u0026quot; ## ## $`6` ## [1] \u0026quot;8C\u0026quot; \u0026quot;6H\u0026quot; \u0026quot;7D\u0026quot; \u0026quot;AS\u0026quot; \u0026quot;5C\u0026quot; ## ## $`7` ## [1] \u0026quot;AD\u0026quot; \u0026quot;7S\u0026quot; \u0026quot;AC\u0026quot; \u0026quot;5H\u0026quot; \u0026quot;10C\u0026quot;  Here is all of our code in one place.\n# Set a random number seed for reproducibility set.seed(106108) # Create a vector of to represent card types and assign it the variable cards cardTypes \u0026lt;- c(2:10, \u0026quot;J\u0026quot;,\u0026quot;Q\u0026quot;,\u0026quot;K\u0026quot;, \u0026quot;A\u0026quot;) # Attach suits to each card hearts = paste(cardTypes, \u0026quot;H\u0026quot;, sep = \u0026quot;\u0026quot;) spades = paste(cardTypes, \u0026quot;S\u0026quot;, sep = \u0026quot;\u0026quot;) clubs = paste(cardTypes, \u0026quot;C\u0026quot;, sep = \u0026quot;\u0026quot;) diamonds = paste(cardTypes, \u0026quot;D\u0026quot;, sep = \u0026quot;\u0026quot;) # combine our playing cards into one vector along with the two jokers playingCards = c(hearts, spades, clubs, diamonds) # Deal hands hands = split(x = sample(playingCards, 35, replace = F), f = c(1,2,3,4,5,6,7)) print(hands)  ## $`1` ## [1] \u0026quot;KC\u0026quot; \u0026quot;JD\u0026quot; \u0026quot;4D\u0026quot; \u0026quot;9D\u0026quot; \u0026quot;9S\u0026quot; ## ## $`2` ## [1] \u0026quot;7S\u0026quot; \u0026quot;8D\u0026quot; \u0026quot;2D\u0026quot; \u0026quot;KD\u0026quot; \u0026quot;7D\u0026quot; ## ## $`3` ## [1] \u0026quot;6S\u0026quot; \u0026quot;5H\u0026quot; \u0026quot;6D\u0026quot; \u0026quot;JS\u0026quot; \u0026quot;6C\u0026quot; ## ## $`4` ## [1] \u0026quot;8S\u0026quot; \u0026quot;8C\u0026quot; \u0026quot;QH\u0026quot; \u0026quot;10D\u0026quot; \u0026quot;5C\u0026quot; ## ## $`5` ## [1] \u0026quot;3H\u0026quot; \u0026quot;3D\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;4H\u0026quot; \u0026quot;2S\u0026quot; ## ## $`6` ## [1] \u0026quot;6H\u0026quot; \u0026quot;7C\u0026quot; \u0026quot;AD\u0026quot; \u0026quot;5S\u0026quot; \u0026quot;2H\u0026quot; ## ## $`7` ## [1] \u0026quot;4C\u0026quot; \u0026quot;7H\u0026quot; \u0026quot;JC\u0026quot; \u0026quot;KH\u0026quot; \u0026quot;9H\u0026quot;  ","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559521008,"objectID":"fe4455cf9660883717da4fec12a67646","permalink":"/post/learning-r-dealing-playcards/","publishdate":"2019-06-02T00:00:00Z","relpermalink":"/post/learning-r-dealing-playcards/","section":"post","summary":"Introduction There are lots of benefits to learning a computer language, even if only learning enough to make yourself dangerous to your own computer. In this post, I\u0026rsquo;ll provide a purposely dumb way to shuffle playing cards and deal hands to different players. In doing so, I will demonstrate a variety of basic operations in the R language.\n# This is a comment. We write comments for future programmers # to be able to read and understand our code.","tags":[],"title":"Learning R: Dealing Playcards","type":"post"},{"authors":[],"categories":["R"],"content":" Introduction This simulation is an example of randomization inference.\nset.seed(8675309) library(dplyr) library(ggplot2) library(readr)  To understand how the public perceives Donald Trump\u0026rsquo;s tweets, YouGov runs a poll that asks a representative sample of the US population to rate each tweet the day they are published. Trump\u0026rsquo;s writing style when tweeting is often hyperbolic, with certain words in all-caps and extending out others (\u0026ldquo;sooooo\u0026rdquo;) for effect.\nTo show how randomization inference works, let\u0026rsquo;s simulate some Trump tweets based on the YouGov scoring system. Further, let\u0026rsquo;s suppose for the sake of argument that Trump randomly inserts hyperbolic phrases into his tweets.\n# Generate some tweets tweets \u0026lt;- data.frame(tweet = c(1:20), score_obs = round(rnorm(20, 0, 36)), exclamation = sample(0:1, 20, replace = T))%\u0026gt;% mutate(Y_i1 = ifelse(exclamation == 1, score_obs, NA), Y_i0 = ifelse(exclamation == 0, score_obs, NA)) glimpse(tweets)  ## Observations: 20 ## Variables: 5 ## $ tweet \u0026lt;int\u0026gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1… ## $ score_obs \u0026lt;dbl\u0026gt; -36, 26, -22, 73, 38, 36, 1, 24, 21, 33, -56, 37, 5,… ## $ exclamation \u0026lt;int\u0026gt; 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1… ## $ Y_i1 \u0026lt;dbl\u0026gt; NA, NA, NA, 73, 38, NA, 1, 24, 21, NA, -56, NA, 5, -… ## $ Y_i0 \u0026lt;dbl\u0026gt; -36, 26, -22, NA, NA, 36, NA, NA, NA, 33, NA, 37, NA…  For this simulation, exclamation is a treatment assignment and we want to know the effect that it has on the score of the tweets.\nSharp Null Hypothesis # Fill in potential outcomes to make the Sharp Null tweets_ri = tweets %\u0026gt;% mutate(Y_i1 = ifelse(is.na(Y_i1), Y_i0, Y_i1), Y_i0 = ifelse(is.na(Y_i0), Y_i1, Y_i0))%\u0026gt;% select(Y_i1, Y_i0, exclamation, score_obs) glimpse(tweets_ri)  ## Observations: 20 ## Variables: 4 ## $ Y_i1 \u0026lt;dbl\u0026gt; -36, 26, -22, 73, 38, 36, 1, 24, 21, 33, -56, 37, 5,… ## $ Y_i0 \u0026lt;dbl\u0026gt; -36, 26, -22, 73, 38, 36, 1, 24, 21, 33, -56, 37, 5,… ## $ exclamation \u0026lt;int\u0026gt; 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1… ## $ score_obs \u0026lt;dbl\u0026gt; -36, 26, -22, 73, 38, 36, 1, 24, 21, 33, -56, 37, 5,…  First we take a difference in means in our observed values, our average treatment effect (ATE). We are going to compare this value to a distribution created by randomizing treatment assignment under the assumption that the true potential outcomes are identical and so there is no difference in treatment and control. This is the Sharp Null Hypothesis.\nATE = mean(tweets_ri$score_obs[tweets_ri$exclamation == 1]) - mean(tweets_ri$score_obs[tweets_ri$exclamation == 0]) ATE  ## [1] -8  Simulation To apply randomization inference, we first create all possible treatment vectors.\nposs_treatments = matrix(NA, 10000, 20) for(i in 1:nrow(poss_treatments)){ poss_treatments[i,] = sample(tweets_ri$exclamation, 20, replace = F) } # Keep only unique treamtent assignments poss_treatments = unique(poss_treatments)  Next we calculate the average treatment effect for each possible randomization\nposs_ate = NA for(i in 1:nrow(poss_treatments)){ mean_w_exclam = mean(tweets_ri$score_obs[poss_treatments[i,]== 1]) mean_wo_exclam = mean(tweets_ri$score_obs[poss_treatments[i, ]== 0]) poss_ate[i] = mean_w_exclam - mean_wo_exclam }  To evaluate whether our observed average treatment effect is significant, we can plot the distribution of our randomization. Code for that is given below.\nResults ggplot(as.data.frame(poss_ate), aes(x = poss_ate))+ geom_histogram(aes(y=..density..), binwidth = 1)+ geom_vline(xintercept = ATE, color = \u0026quot;red\u0026quot;, size = 1)+ theme_minimal()+ xlab(\u0026quot;Randomized Average Treatment Effects\u0026quot;)+ ylab(\u0026quot;Density\u0026quot;)+ ggtitle(\u0026quot;Randomization Inference of the Effect of Exclamations\\nin Donald Trump's Tweets\u0026quot;)  Now, we can also calculate a p-value.\n# One tailed sum(poss_ate\u0026gt;=ATE)/length(poss_ate)  ## [1] 0.6925842  or a Two tailed p-value.\n# Two tailed sum(abs(poss_ate)\u0026gt;=ATE)/length(poss_ate)  ## [1] 1  Given how we created our data, it is unsurprising that the p-value is not signficant. What is practically helpful is the procedure for simulation.\n","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559519639,"objectID":"69fc1729a7d2e187e6c9a7f3329ba249","permalink":"/post/randomization-inference-a-simple-example/","publishdate":"2019-06-02T00:00:00Z","relpermalink":"/post/randomization-inference-a-simple-example/","section":"post","summary":"Introduction This simulation is an example of randomization inference.\nset.seed(8675309) library(dplyr) library(ggplot2) library(readr)  To understand how the public perceives Donald Trump\u0026rsquo;s tweets, YouGov runs a poll that asks a representative sample of the US population to rate each tweet the day they are published. Trump\u0026rsquo;s writing style when tweeting is often hyperbolic, with certain words in all-caps and extending out others (\u0026ldquo;sooooo\u0026rdquo;) for effect.\nTo show how randomization inference works, let\u0026rsquo;s simulate some Trump tweets based on the YouGov scoring system.","tags":[],"title":"Randomization Inference: A Simple Example","type":"post"},{"authors":[],"categories":["R"],"content":" Introduction Suppose you are a concerned citizen who would like to know how voters in a state voted. Perhaps you are a voter in a state with rampant corruption or perhaps you are a voter in a state that does not have paper backups for voting machines. Perhaps you are just masochistic enough to be interested in pulling tables out of reasonably well formed pdfs. The following is a code example for the last one.\nFortunately (or unfortunately) for us, the state of New Jersey still provides their official election results in pdf files instead of a common data format like csv or even an Excel file. Copying each item by hand risks user error through fat fingers, sheer tedium, or great displeasure at a state in the 21st Century still outputting results to pdf. Therefore, it is much preferable to search for a code solution.\nEach county in New Jersey reports Senate results separately. Here\u0026rsquo;s Atlantic County\u0026rsquo;s precinct results for the 2018 Senate Race. The table that we are going to extract looks like this.\nHere\u0026rsquo;s one way to pull out the data, using some knowledge about who ran. I make use of tidyverse functions and pdftools. Each step of the function is commented.\nlibrary(tidyverse) library(pdftools)  Once those are loaded, we can write our function.\n# Remove columns that are all NAs not_all_na \u0026lt;- function(x){ !all(is.na(x)) } senate_clean_table \u0026lt;- function(tbl){ # Remove commas and split on new lines tables \u0026lt;- NULL tbl \u0026lt;- str_replace_all(tbl,pattern = \u0026quot;,\u0026quot;, \u0026quot;\u0026quot;)%\u0026gt;% # We can see the table ends with the string NJDOE str_replace_all(\u0026quot;Total[:print:]+\u0026quot;, \u0026quot;NJDOE\u0026quot;)%\u0026gt;% # Split on new lines str_split(pattern = \u0026quot;\\n\u0026quot;, simplify = TRUE) # Some pdfs may be more than one page, so loop over all pages # Atlantic County will only run this loop once for(i in 1:dim(tbl)[1]){ # Find the county name and save name to object county_cell \u0026lt;- stringr::str_which(tbl[i,], \u0026quot;County\u0026quot;) county_name \u0026lt;- tbl[i,county_cell]%\u0026gt;% stringr::str_squish() # Find the senate candidates cell # Pull out candidates, turn them into a vector # Keep only the last names candidates_cell \u0026lt;- stringr::str_which(tbl[i,], \u0026quot;Robert\u0026quot;) candidates \u0026lt;- tbl[i, candidates_cell] %\u0026gt;% trimws()%\u0026gt;% str_squish()%\u0026gt;% str_replace_all(pattern = \u0026quot; R. \u0026quot;, \u0026quot; \u0026quot;)%\u0026gt;% str_replace_all(pattern = \u0026quot; Lynn \u0026quot;, \u0026quot; \u0026quot;)%\u0026gt;% str_split(pattern = \u0026quot;\\\\s\u0026quot;) candidates \u0026lt;- unlist(candidates) # Because each candidate only has two names, after we remove the # initials R recycles and keeps every other cell, which is last names candidates \u0026lt;- candidates[c(FALSE, TRUE)] # Find the party cell. The actual table starts after this one party_cell \u0026lt;- stringr::str_which(tbl[i,], \u0026quot;Democratic\u0026quot;) # Start the data frame table_start \u0026lt;- party_cell + 1 # Find the line with totals. The last line of interest is # directly before it table_end \u0026lt;- stringr::str_which(tbl[i,], \u0026quot;NJDOE\u0026quot;)[1] -1 # Subset to the table of interest table \u0026lt;- tbl[i, table_start:table_end] # Create a delimiter everywhere there are 2 spaces table \u0026lt;- str_replace_all(table, \u0026quot;\\\\s{2,}\u0026quot;, \u0026quot;|\u0026quot;) # Now we can pull out the data # Make a text connection and read that in as a dataframe text_con \u0026lt;- textConnection(table) df \u0026lt;- read.csv(text_con, sep = \u0026quot;|\u0026quot;, header = F, stringsAsFactors = F)%\u0026gt;% dplyr::select_if(not_all_na) # Put in the appropriate column names and then add US senate as office colnames(df)\u0026lt;- c(\u0026quot;precinct\u0026quot;, candidates) df \u0026lt;- df %\u0026gt;% mutate(office = \u0026quot;US Senate\u0026quot;)%\u0026gt;% mutate(county = county_name)%\u0026gt;% select(county, precinct, office, everything()) tables[[i]] \u0026lt;- df } if(length(tables)==1){ out \u0026lt;- tables[[1]] }else{ out \u0026lt;- dplyr::bind_rows(tables) } out }  Supposing that we have stored all the 2018 Senate pdf urls in a vector called senate_urls, we can then make use of purrr::map and purrr::map_dfr() functions to run each through pdf_text and then our function, followed by tidyr::gather() to get our data into a long format.\n# pdf_text() and map to the rescue urls \u0026lt;- c(\u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-atlantic.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-bergen.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-burlington.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-camden.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-capemay.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-cumberland.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-essex.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-gloucester.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-hudson.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-hunterdon.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-mercer.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-middlesex.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-monmouth.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-morris.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-ocean.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-passaic.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-salem.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-somerset.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-sussex.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-union.pdf\u0026quot;, \u0026quot;https://www.state.nj.us/state/elections/assets/pdf/election-results/2018/2018-general-election-results-us-senate-warren.pdf\u0026quot;) senate_urls \u0026lt;- map(urls, pdf_text) nj_senate \u0026lt;- senate_urls %\u0026gt;% map_dfr(senate_clean_table)%\u0026gt;% gather(candidate, votes, -county, -precinct, -office)  We can now take at our now useful voting data.\nhead(nj_senate)  ## county precinct office candidate votes ## 1 Atlantic County Absecon City US Senate Menendez 1551 ## 2 Atlantic County Atlantic City US Senate Menendez 6039 ## 3 Atlantic County Brigantine City US Senate Menendez 1391 ## 4 Atlantic County Buena Boro US Senate Menendez 583 ## 5 Atlantic County Buena Vista Twp. US Senate Menendez 1095 ## 6 Atlantic County Corbin City US Senate Menendez 77  ","date":1559433600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559519010,"objectID":"b57c52148f336a74b874011a075e060b","permalink":"/post/using-pdftools-to-extract-vote-data/","publishdate":"2019-06-02T00:00:00Z","relpermalink":"/post/using-pdftools-to-extract-vote-data/","section":"post","summary":"Introduction Suppose you are a concerned citizen who would like to know how voters in a state voted. Perhaps you are a voter in a state with rampant corruption or perhaps you are a voter in a state that does not have paper backups for voting machines. Perhaps you are just masochistic enough to be interested in pulling tables out of reasonably well formed pdfs. The following is a code example for the last one.","tags":[],"title":"Using pdftools to Extract Vote Data","type":"post"}]